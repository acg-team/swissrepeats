df.domain <- sp_gathered[which(sp_gathered$RepeatType == "Domain"),]
model.lm <- lm(Fraction ~ mean_sequence_length, data = df.domain)
summary(model.lm)
# Add meta_data from sp_all to tr_all. -> Do a left join.
library(ggrepel)
sp = ddply(sp_all, .(origin, Superkingdom, Kingdom, is_chloroplastic, is_mitochondrial),
summarize,
has_tr_fraction=sum(has_tr==TRUE)/length(ID),
has_micro_tr_fraction=sum(has_micro_tr==TRUE)/length(ID),
has_short_tr_fraction=sum(has_short_tr==TRUE)/length(ID),
has_domain_tr_fraction=sum(has_domain_tr==TRUE)/length(ID),
mean_sequence_length=mean(Length),
count=length(ID))
head(sp)
p = ggplot(sp, aes(x=mean_sequence_length, y=has_tr_fraction, shape=Superkingdom)) + # colour=origin, shape=Superkingdom, size=log10(count)
geom_point(size = 3)+
scale_fill_manual(values=getPalette(colour_count)) + scale_size_continuous(range=c(2,7)) + #scale_colour_brewer(type=2, palette="RdYlBu")
geom_abline(intercept=0, slope=mean(sp$has_tr_fraction)/mean(sp$mean_sequence_length), colour="grey")+
# ggtitle('All tandem repeats')+
labs(x="Mean Protein Length",
y="Fraction of TR")+
# geom_label_repel(aes(label = origin),                     # textbox label
#                 direction = c("both"),
#                 label.size = NA,
#                 label
#                 box.padding   = 0.5,
#                 point.padding = 0.4,
#                 segment.alpha = 0.5,
#                 segment.color = 'grey50')
geom_text_repel(aes(label = origin),                        # plain text label
colour = "black")
p = beautifier(p)
p <- paper.figure(p)
if( save) {
ggsave(paste0(pathImages, "fig2a_all", figureFormat), width=12, height=8, dpi = 300)
}
#### NORMALIZATION IS NOT WORKING HERE....
# # small proteins and small fraction of TRs
# all_tr_outliers1 <- sp_all[which(sp_all$origin == "Chloroplastic (unknown)" & sp_all$has_tr == TRUE),]
# all_tr_outliers1[order(all_tr_outliers1$Species),]
#
# all_tr_outliers1 <- ddply(all_tr_outliers1, .(origin, Superkingdom, Kingdom, Species, protein_name), # count species occurences
#            summarize,
#            species_count=length(Species)/length(sp_all))
# all_tr_outliers1 <- arrange(all_tr_outliers1, desc(species_count))
# head(all_tr_outliers1)
#
# # plot with geom_bar with own stats and ordered descending
# p <- ggplot(all_tr_outliers1)+
#   geom_bar(aes(reorder(Species, species_count), species_count), stat = "identity")+
#   coord_flip()+
#   ggtitle('All tandem repeats')+
#   labs(x="Species",
#        y="Fraction of proteins with TRs",
#        subtitle = "Chloroplastic (unknown)")
# p <- beautifier(p)
# p
# # Look at which protein from red algae is most prominent
# all_tr_outliers1_redalg <- all_tr_outliers1[which(all_tr_outliers1$Species == "Pyropia yezoensis (Red alga) (Porphyra yezoensis)"), ]
# all_tr_outliers1_redalg[order(all_tr_outliers1_redalg$protein_name),]
# head(all_tr_outliers1_redalg)
#### REPORT ONLY ACTUAL NUMBERS THEREFORE...
# small proteins and small fraction of TRs
all_tr_outliers1 <- sp_all[which(sp_all$origin == "Chloroplastic (unknown)" & sp_all$has_tr == TRUE),]
all_tr_outliers1[order(all_tr_outliers1$Species),]
all_tr_outliers1 <- ddply(all_tr_outliers1, .(origin, Superkingdom, Kingdom, Species), # count species occurences
summarize,
species_count=length(Species))
all_tr_outliers1 <- arrange(all_tr_outliers1, desc(species_count))
head(all_tr_outliers1)
# plot with geom_bar with own stats and ordered descending
p <- ggplot(all_tr_outliers1)+
geom_bar(aes(reorder(Species, species_count), species_count), stat = "identity")+
coord_flip()+
ggtitle('All tandem repeats')+
labs(x="Species",
y="No. of proteins with TRs",
subtitle = "Chloroplastic (unknown)")
p <- beautifier(p)
p
# many proteins, and big fraction of TRs
all_tr_outliers2 <- sp_all[which(sp_all$origin == "Mitochondrial (Viridiplantae)" & sp_all$has_tr == TRUE),]
all_tr_outliers2[order(all_tr_outliers2$Species),]
all_tr_outliers2 <- ddply(all_tr_outliers2, .(origin, Superkingdom, Kingdom, Species),
summarize,
species_count=length(Species))
all_tr_outliers2 <- arrange(all_tr_outliers2, desc(species_count))
all_tr_outliers2 <- all_tr_outliers2[which(all_tr_outliers2$species_count>2),]
head(all_tr_outliers2)
# plot with geom_bar with own stats and ordered descending
p <- ggplot(all_tr_outliers2)+
geom_bar(aes(reorder(Species, species_count), species_count), stat = "identity")+
coord_flip()+
ggtitle('All tandem repeats')+
labs(x="Species",
y="No. of proteins with TRs",
subtitle = "Mitochondrial (Viridiplantae)")
p <- beautifier(p)
p <- paper.figure(p)
p
p = ggplot(sp, aes(x=mean_sequence_length, y=has_micro_tr_fraction, shape=Superkingdom)) + # colour=origin, , size=log10(count)
geom_point(size = 3) +
geom_abline(intercept=0, slope=mean(sp$has_micro_tr_fraction)/mean(sp$mean_sequence_length), colour="grey")+
theme(         text = element_text(),
legend.text = element_text(family = "sans", face='italic', hjust=0),
strip.text.x = element_text(family = "sans",angle = 0),
strip.text.y = element_text(family = "sans",angle = 270, margin = margin(r=30)),
axis.text.x = element_text(family = "sans",angle = 90, margin=margin(1,1,2,1,"pt")),
axis.text.y = element_text(family = "sans",margin=margin(1,1,2,1,"pt")),
axis.ticks.length = unit(0.05, "cm")) +
labs(x="Mean Protein Length",
y="Fraction of micro TR")+
coord_cartesian(ylim = c(min(sp_gathered$Fraction),max(sp_gathered$Fraction)))+
scale_fill_manual(values=getPalette(colour_count)) +
scale_size_continuous(range=c(2,7)) +
ggtitle('Micro tandem repeats')+
geom_text_repel(aes(label = origin),                        # plain text label
colour = "black")
p = beautifier(p)
if( save) {
ggsave(paste0(pathImages, "fig2a_micro", figureFormat), width=12, height=8, dpi = 300)
}
p <- paper.figure(p)
p
# many proteins, and big fraction of TRs
micro_tr_outliers <- sp_all[which(sp_all$origin == "unknown (Eukaryota)" & sp_all$has_micro_tr == TRUE),]
micro_tr_outliers[order(micro_tr_outliers$Species),]
micro_tr_outliers <- ddply(micro_tr_outliers, .(origin, Superkingdom, Kingdom, Species),
summarize,
species_count=length(Species))
micro_tr_outliers <- arrange(micro_tr_outliers, desc(species_count))
head(micro_tr_outliers)
# plot with geom_bar with own stats and ordered descending
p <- ggplot(micro_tr_outliers[which(micro_tr_outliers$species_count>10),])+  #display only those Species with more than 10 proteins with micro TRs
geom_bar(aes(reorder(Species, species_count), species_count), stat = "identity")+
coord_flip()+
ggtitle('Micro tandem repeats')+
labs(x="Species",
y="No. of proteins with micro TRs",
subtitle = "unknown (Eukaryota)")
p <- beautifier(p)
p <- paper.figure(p)
p
p = ggplot(sp, aes(x=mean_sequence_length, y=has_short_tr_fraction, shape=Superkingdom)) + # colour=origin, , size=log10(count)
geom_point()+
geom_abline(intercept=0, slope=mean(sp$has_short_tr_fraction)/mean(sp$mean_sequence_length), colour="grey")+
theme(         text = element_text(),
legend.text = element_text(family = "sans", face='italic', hjust=0),
strip.text.x = element_text(family = "sans",angle = 0),
strip.text.y = element_text(family = "sans",angle = 270, margin = margin(r=30)),
axis.text.x = element_text(family = "sans",angle = 90, margin=margin(1,1,2,1,"pt")),
axis.text.y = element_text(family = "sans",margin=margin(1,1,2,1,"pt")),
axis.ticks.length = unit(0.05, "cm")) +
geom_point(size=2) +
labs(x="Mean Protein Length",
y="Fraction of small TR")+
coord_cartesian(ylim = c(min(sp_gathered$Fraction),max(sp_gathered$Fraction)))+
scale_fill_manual(values=getPalette(colour_count)) +
scale_size_continuous(range=c(2,7)) +
ggtitle('Small tandem repeats')+
geom_text_repel(aes(label = origin),                        # plain text label
colour = "black")
p = beautifier(p)
p <- paper.figure(p)
p
if( save) {
ggsave(paste0(pathImages, "fig2a_short", figureFormat), width=12, height=8, dpi = 300)
}
p = ggplot(sp, aes(x=mean_sequence_length, y=has_domain_tr_fraction, shape=Superkingdom)) + #colour=origin, , size=log10(count)
geom_point()+
geom_abline(intercept=0, slope=mean(sp$has_domain_tr_fraction)/mean(sp$mean_sequence_length), colour="grey")+
theme(         text = element_text(),
legend.text = element_text(family = "sans", face='italic', hjust=0),
strip.text.x = element_text(family = "sans",angle = 0),
strip.text.y = element_text(family = "sans",angle = 270, margin = margin(r=30)),
axis.text.x = element_text(family = "sans",angle = 90, margin=margin(1,1,2,1,"pt")),
axis.text.y = element_text(family = "sans",margin=margin(1,1,2,1,"pt")),
axis.ticks.length = unit(0.05, "cm")) +
geom_point(size=2) +
labs(x="Mean Protein Length",
y="Fraction of domain TR")+
coord_cartesian(ylim = c(min(sp_gathered$Fraction),max(sp_gathered$Fraction)))+
scale_fill_manual(values=getPalette(colour_count)) +
scale_size_continuous(range=c(2,7)) +
ggtitle('Domain tandem repeats')+
geom_text_repel(aes(label = origin),                        # plain text label
colour = "black")
p = beautifier(p)
p <- paper.figure(p)
p
if( save) {
ggsave(paste0(pathImages, "fig2a_domain", figureFormat), width=12, height=8, dpi = 300)
}
# big proteins, and big fraction of TRs
domain_tr_outliers <- sp_all[which(sp_all$origin == "Mitochondrial (Viridiplantae)" & sp_all$has_domain_tr == TRUE),]
domain_tr_outliers[order(domain_tr_outliers$Species),]
domain_tr_outliers <- ddply(domain_tr_outliers, .(origin, Superkingdom, Kingdom, Species),
summarize,
species_count=length(Species))
domain_tr_outliers <- arrange(domain_tr_outliers, desc(species_count))
head(domain_tr_outliers)
# plot with geom_bar with own stats and ordered descending
p <- ggplot(domain_tr_outliers[which(domain_tr_outliers$species_count>1),])+  #display only those Species with more than 1 proteins with domain TRs
geom_bar(aes(reorder(Species, species_count), species_count), stat = "identity")+
coord_flip()+
ggtitle('Domain tandem repeats')+
labs(x="Species",
y="No. of proteins with domain TRs",
subtitle = "Mitochondrial (Viridiplantae)")
p <- beautifier(p)
p <- paper.figure(p)
p
sequence_length_bin <- with(sp_all, cut(Length, breaks = c(0, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950, 1000, 1250, 1500, 2000, 50000), dig.lab=12))
sp <- ddply(sp_all, .(Superkingdom, sequence_length_bin),
summarise,
has_tr_fraction=sum(has_tr==TRUE)/length(ID),
has_micro_tr_fraction=sum(has_micro_tr==TRUE)/length(ID),
has_short_tr_fraction=sum(has_short_tr==TRUE)/length(ID),
has_domain_tr_fraction=sum(has_domain_tr==TRUE)/length(ID),
n_proteins=length(ID))
sp$has_tr_fraction_binary_proportion_confidence_interval = sqrt(sp$has_tr_fraction*(1-sp$has_tr_fraction)/sp$n_proteins)
# Need to summarize data for blocks of "Length".
# For the error bars, see https://en.wikipedia.org/wiki/Binomial_proportion_confidence_interval
p = ggplot(sp, aes(x=sequence_length_bin, y=has_tr_fraction, colour=Superkingdom)) +
geom_point()+
geom_errorbar(aes(ymin=has_tr_fraction-has_tr_fraction_binary_proportion_confidence_interval,
ymax=has_tr_fraction+has_tr_fraction_binary_proportion_confidence_interval), width=.2) +
scale_colour_brewer(type=2, palette="Dark2")+
# ggtitle('Tandem repeat appearance by protein sequence length and Superkingdom')+
theme(text = element_text(),
legend.text = element_text(family = "sans", face='italic', hjust=0),
strip.text.x = element_text(family = "sans", angle = 0),
strip.text.y = element_text(family = "sans", angle = 270, margin = margin(r=30)),
axis.text.x = element_text(family = "sans", angle = 90, margin=margin(1,1,2,1,"pt")),
axis.text.y = element_text(family = "sans", margin=margin(1,1,2,1,"pt"))) +
labs(x="Sequence length",
y="Fraction of TR")
p = beautifier(p)
p <- paper.figure(p)
p
if( save) {
ggsave(paste0(pathImages, "fig2a-2", figureFormat), width=12, height=8, dpi = 300)
}
p = ggplot(sp, aes(x=sequence_length_bin, y=has_micro_tr_fraction, colour=Superkingdom)) + geom_point()
p = p +
geom_errorbar(aes(ymin=has_micro_tr_fraction-has_tr_fraction_binary_proportion_confidence_interval,
ymax=has_micro_tr_fraction+has_tr_fraction_binary_proportion_confidence_interval), width=.2)+
scale_colour_brewer(type=2, palette="Dark2") +
ggtitle('Micro tandem repeats') + # TODO: Add wrapped plots for other species
theme(
text = element_text(),
legend.text = element_text(family = "sans", face='italic', hjust=0),
strip.text.x = element_text(family = "sans", angle = 0),
strip.text.y = element_text(family = "sans", angle = 270, margin = margin(r=30)),
axis.text.x = element_text(family = "sans", angle = 90, margin=margin(1,1,2,1,"pt")),
axis.text.y = element_text(family = "sans", margin=margin(1,1,2,1,"pt"))
) +
labs(x="Sequence length",
y="Fraction with micro TR")
p = beautifier(p)
p <- paper.figure(p)
p
if( save) {
ggsave(paste0(pathImages, "fig2a-3", figureFormat), width=12, height=8, dpi = 300)
}
p = ggplot(sp, aes(x=sequence_length_bin, y=has_short_tr_fraction, colour=Superkingdom)) + geom_point()
p = p +
geom_errorbar(aes(ymin=has_micro_tr_fraction-has_tr_fraction_binary_proportion_confidence_interval,
ymax=has_micro_tr_fraction+has_tr_fraction_binary_proportion_confidence_interval), width=.2)+
scale_colour_brewer(type=2, palette="Dark2") +
ggtitle('Small tandem repeats') + # TODO: Add wrapped plots for other species
theme(
text = element_text(),
legend.text = element_text(family = "sans", face='italic', hjust=0),
strip.text.x = element_text(family = "sans", angle = 0),
strip.text.y = element_text(family = "sans", angle = 270, margin = margin(r=30)),
axis.text.x = element_text(family = "sans", angle = 90, margin=margin(1,1,2,1,"pt")),
axis.text.y = element_text(family = "sans", margin=margin(1,1,2,1,"pt"))
) +
labs(x="Sequence length",
y="Fraction with smal TR")
p = beautifier(p)
p <- paper.figure(p)
p
if( save) {
ggsave(paste0(pathImages, "fig2a-4", figureFormat), width=12, height=8, dpi = 300)
}
p = ggplot(sp, aes(x=sequence_length_bin, y=has_domain_tr_fraction, colour=Superkingdom)) + geom_point()
p = p +
geom_errorbar(aes(ymin=has_micro_tr_fraction-has_tr_fraction_binary_proportion_confidence_interval,
ymax=has_micro_tr_fraction+has_tr_fraction_binary_proportion_confidence_interval), width=.2)+
scale_colour_brewer(type=2, palette="Dark2") +
ggtitle('Domain tandem repeats') + # TODO: Add wrapped plots for other species
theme(
text = element_text(),
legend.text = element_text(family = "sans", face='italic', hjust=0),
strip.text.x = element_text(family = "sans", angle = 0),
strip.text.y = element_text(family = "sans", angle = 270, margin = margin(r=30)),
axis.text.x = element_text(family = "sans", angle = 90, margin=margin(1,1,2,1,"pt")),
axis.text.y = element_text(family = "sans", margin=margin(1,1,2,1,"pt"))
) +
labs(x="Sequence length",
y="Fraction with domain TR")
p = beautifier(p)
p <- paper.figure(p)
p
if( save) {
ggsave(paste0(pathImages, "fig2a-5", figureFormat), width=12, height=8, dpi = 300)
}
protein_length_bin <-cut(sp_protein$Length, breaks = c(0, 50, 100, 300, 500, 1000, 1500, 2000, 3000, max(sp_protein$Length)), dig.lab=12)
sp_protein$length_group = protein_length_bin
sp_protein_bylength = ddply(sp_protein, .(length_group, origin, Superkingdom), summarize, mean_dis_content=mean(disorder_count/Length), count=length(ID))
p = ggplot(sp_protein_bylength, aes(x=length_group, y=mean_dis_content, shape=Superkingdom, colour=origin, size=log(count)/10)) +
geom_point(alpha=0.5, show.legend=TRUE) +
ylim(0,1.0) +
geom_line(aes(group=origin), size=0.3)+
theme_minimal() +
theme(axis.text.x = element_text(angle=45, hjust=1),
text = element_text(size = 2)) + # size = 8
labs(y="Mean disorder content",
x="Protein Length")
p <- paper.figure(p)
p
if( save) {
ggsave(paste0(pathImages, "fig2b", figureFormat), width=12, height=8, dpi = 300)
}
sp_protein_bylength = ddply(sp_protein, .(length_group, Superkingdom), summarize, mean_dis_content=mean(disorder_count/Length), count=length(ID))
p = ggplot(sp_protein_bylength, aes(x=length_group, y=mean_dis_content, colour=Superkingdom, size=log10(count))) +
geom_point(alpha=0.5, show.legend=TRUE) +
ylim(0,1.0) +
geom_line(aes(group=Superkingdom), size=0.3)
p = p + theme_minimal() +
theme(axis.text.x = element_text(angle=45, hjust=1),
text = element_text(size=8)) +
labs(y="Mean disorder content",
x="Protein Length")
p <- paper.figure(p)
if( save) {
ggsave(paste0(pathImages, "fig2b_simple", figureFormat), width=12, height=8, dpi = 300)
}
tr_all_sp$repeat_type_bin <- with(tr_all_sp, cut(l_effective, breaks = c(0,3, 15, 2000), dig.lab = 12))
p = ggplot(tr_all_sp, aes(x = center/Length, colour=repeat_type_bin, fill=repeat_type_bin)) +
geom_density(alpha=.5) + facet_wrap(~ Superkingdom, scales = "free")
p = beautifier(p) +
# theme(strip.text = element_text(size=10),
#       legend.text = element_text(size=20),
#       legend.title = element_text(size=30),
#       axis.text = element_text(size=15)) +
theme(strip.text = element_text(),
legend.text = element_text(),
legend.title = element_text(),
axis.text = element_text()) +
labs(x="TR center location (center/Length)",
y="Density",
fill=expression(l[effective])) +
guides(color=F) # disable color axis
p <- paper.figure(p)
p
if( save) {
ggsave(paste0(pathImages, "fig3a", figureFormat), width=12, height=8, dpi = 300)
}
tr_all_sp$repeat_type_bin <- with(tr_all_sp, cut(l_effective, breaks = c(0,3, 15, 2000), dig.lab = 12))
p = ggplot(tr_all_sp, aes(x = center/Length, colour=repeat_type_bin, fill=repeat_type_bin)) +
geom_density(size=1, alpha=.5) +
scale_color_manual( values = c("grey","violet","turquoise4"), name  ="TR type", breaks=c("(0,3]","(3,15]", "(15,2000]"),labels=c("Micro", "Small","Domain")) +
scale_fill_manual( values = c("grey","violet","turquoise4"), name  ="TR type", breaks=c("(0,3]","(3,15]", "(15,2000]"),labels=c("Micro", "Small","Domain")) +
labs(x="TR center location (center/Length)", y="Density")
p = p + theme_minimal(base_size = 10)
p <- paper.figure(p)
p
if( save) {
ggsave(paste0(pathImages, "fig3a_all", figureFormat), width=12, height=8, dpi = 300)
}
# renormalized version accounting for true length
tr_all_sp$repeat_type_bin <- with(tr_all_sp, cut(l_effective, breaks = c(0,3, 15, 2000), dig.lab = 12))
tr_all_sp_positions <- tr_all_sp %>%
transmute(repeat_type_bin,
Superkingdom,
center=round(center),
Length=round(Length),
total_repeat_length=round(total_repeat_length)) %>%
mutate(usableLen = Length - total_repeat_length,
pos = (center-ceiling(total_repeat_length/2))/usableLen) %>%
filter(usableLen > 0) %>% #otherwise causes NaN or Inf
tbl_df
summary(tr_all_sp_positions)
summary(tr_all_sp_positions[which(tr_all_sp_positions$Superkingdom == "Viruses"),]) #limited number of observations for viruses and archaea
summary(tr_all_sp_positions[which(tr_all_sp_positions$Superkingdom == "Archaea"),]) #limited number of observations for viruses and archaea
# possible bug: some centers lie outside the usable length
tr_all_sp_positions %>%
mutate(diff= center - floor(Length+1/2 - total_repeat_length/2)) %>%
arrange(-pos) %>%
top_n(1,diff) %>%
invisible
# cols <- brewer.pal(3, "Dark2")
cols1 <- c("#AA3939", "#AA7939", "#29506D") #c("#801515", "#805215", "#123652") #http://paletton.com/#uid=7000I0kllllaFw0g0qFqFg0w0aF
cols2 <- c("#FFAAAA", "#FFDBAA", "#718EA4") #c("#AA3939", "#AA7939", "#29506D")
p = ggplot(tr_all_sp_positions %>% filter(pos <= 1), aes(x = pos, colour=repeat_type_bin, fill=repeat_type_bin)) +
geom_density(alpha=.7) +
scale_color_manual( values = cols1, #values = c("grey","violet","turquoise4"),
name  ="TR type",
breaks=c("(0,3]","(3,15]", "(15,2000]"),
labels=c("Micro", "Small","Domain")) +
scale_fill_manual( values = cols2,
name  ="TR type",
breaks=c("(0,3]","(3,15]", "(15,2000]"),
labels=c("Micro", "Small","Domain")) +
labs(x="TR center location", y="Density")
p <- beautifier(p)
p <- paper.figure(p)
p
if( save) {
ggsave(paste0(pathImages, "fig3a_all_renormalized", figureFormat), width=12, height=8, dpi = 300)
}
p = ggplot(tr_all_sp_positions %>% filter(pos <= 1), aes(x = pos, colour=repeat_type_bin, fill=repeat_type_bin)) +
geom_density(alpha=.7)+
facet_wrap(~ Superkingdom, scales = "free")+
scale_color_manual( values = cols1, #values = c("grey","violet","turquoise4"),
name  ="TR type",
breaks=c("(0,3]","(3,15]", "(15,2000]"),
labels=c("Micro", "Small","Domain")) +
scale_fill_manual( values = cols2,
name  ="TR type",
breaks=c("(0,3]","(3,15]", "(15,2000]"),
labels=c("Micro", "Small","Domain")) +
labs(x="TR center location", y="Density")
p <- beautifier(p)
p <- paper.figure(p)
p
if( save) {
ggsave(paste0(pathImages, "fig3a_Superkingdoms_renormalized", figureFormat), width=12, height=8, dpi = 300)
}
d_sub = subset(tr_all_sp, TRD=="PFAM")
d = ddply(d_sub, .(Superkingdom, is_chloroplastic, is_mitochondrial, model), summarize, count=length(ID))
d_cut = subset(d, Superkingdom=="Bacteria")
d_cut[order(d_cut$count,decreasing=T)[1:10],]
d_cut = subset(d, Superkingdom=="Archaea")
d_cut[order(d_cut$count,decreasing=T)[1:10],]
d_cut = subset(d, Superkingdom=="Viruses")
d_cut[order(d_cut$count,decreasing=T)[1:10],]
d = ddply(d_sub, .(Superkingdom, Kingdom, is_chloroplastic, is_mitochondrial, model), summarize, count=length(ID))
d_cut = subset(d, Superkingdom=="Eukaryota" & Kingdom == "Viridiplantae" & is_mitochondrial==FALSE & is_chloroplastic==FALSE)
d_cut[order(d_cut$count,decreasing=T)[1:10],]
d_cut = subset(d, Superkingdom=="Eukaryota" & Kingdom == "Metazoa" & is_mitochondrial==FALSE)
d_cut[order(d_cut$count,decreasing=T)[1:10],]
d_cut = subset(d, Superkingdom=="Eukaryota" & Kingdom == "Fungi" & is_mitochondrial==FALSE)
d_cut[order(d_cut$count,decreasing=T)[1:10],]
d = ddply(d_sub, .(is_chloroplastic, is_mitochondrial, model), summarize, count=length(ID))
d_cut = subset(d, is_mitochondrial==TRUE)
d_cut[order(d_cut$count,decreasing=T)[1:10],]
d_cut = subset(d, is_chloroplastic==TRUE)
d_cut[order(d_cut$count,decreasing=T)[1:10],]
df <- gather(many_distinct_regions_TR_fractions, key = "TR_type", value = "Fraction", c("has_micro_tr_fraction", "has_short_tr_fraction", "has_domain_tr_fraction"))
df$TR_type[which(df$TR_type=="has_micro_tr_fraction")] <- "micro TRs"
df$TR_type[which(df$TR_type=="has_short_tr_fraction")] <- "small TRs"
df$TR_type[which(df$TR_type=="has_domain_tr_fraction")] <- "domain TRs"
cols1 <- c("#AA3939", "#AA7939", "#29506D", "#2D882D")  #http://paletton.com/#uid=7000I0kllllaFw0g0qFqFg0w0aF
p <- ggplot(df, aes(x = Superkingdom, y = Fraction, facet = TR_type, fill = Superkingdom))+
facet_wrap(facets="TR_type") +
geom_col()
p <- beautifier(p)+
scale_fill_manual(values = cols1)
p <- paper.figure(p)+
theme(axis.title.x=element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1))
# ggtitle(paste("TR types in proteins with more or equal 4 TRs"))
p
p <- paper.figure(p)+
theme(axis.title.x=element_blank(),
axis.text.x = element_text(angle = 45, hjust = 2))
# ggtitle(paste("TR types in proteins with more or equal 4 TRs"))
p
p <- paper.figure(p)+
theme(axis.title.x=element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1.5))
# ggtitle(paste("TR types in proteins with more or equal 4 TRs"))
p
p <- paper.figure(p)+
theme(axis.title.x=element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1.1))
# ggtitle(paste("TR types in proteins with more or equal 4 TRs"))
p
if(save) {
ggsave(paste0(pathImages, "TRtypes_distribution_in_prot_with_more_4TRs", figureFormat), width=12, height=8, dpi = 300)
}
rm(list = ls(all = TRUE))
gc()
library("ggplot2")
library("plyr")
library("scales")
require(grid)
library(RColorBrewer)
library(stringr)
setwd("/home/matteo/polybox/MSc_ACLS/swissrepeat/results")
source("helpers.R")
sp_path = "data/swissprot_annotations.tsv"
sp_all = load_swissprot(sp_path)
rm(list = ls(all = TRUE))
gc()
source("helpers.R")
sp_path = "data/swissprot_annotations.tsv"
sp_all = load_swissprot(sp_path)
tr_path = "results/tr_annotations/tr_annotations.csv"
tr_all = load_tr_annotations(tr_path)
# Add meta_data from sp_all to tr_all. -> Do a left join.
tr_all_sp = merge(x = tr_all, y = sp_all, by = "ID", all.x = TRUE)
discoor_path = "results/disorder_annotations/mobidb_coordinates.csv"
discoor_all = load_disorder_annotations(discoor_path)
do_all_sp = merge(x = discoor_all, y = sp_all, by = "ID", all.x = TRUE)
str(tr_all_sp)
str(do_all_sp)
str(discoor_all)
